# we tell travis that we need a root access
sudo: required

services:
  # we need the docker cli to build and run images
  - docker

before_install:
  # we are using the Dockerfile.dev because it's the image we need to make tests
  - docker build -t amdouni-mohamed-ali/react-travis-aws-ci-cd  -f Dockerfile.dev .

# travis will run the commands and test return code. if it's different from 0 he will assume that the code is broken
script:
  # this line uses an environment variable used to run test once without launching the watcher. https://create-react-app.dev/docs/running-tests/#linux-macos-bash
  - docker run -e CI=true amdouni-mohamed-ali/react-travis-aws-ci-cd npm run test

deploy:
  # travis supports many of providers: one of them is amazon elastic beans talk
  # this is the generated url  ReactAppTravisAws-env.wz96m4wayz.us-east-2.elasticbeanstalk.com
  provider: elasticbeanstalk
  region: "us-east-2"
  # application name
  app: "react-app-travis-aws"
  # application environment (specified just after the app name in the url generated by amazon)
  env: "ReactAppTravisAws-env"
  # travis will zip the content of our github repository and uploaded it to an s3 (storage area) bucket created just after the creation of our app
  bucket_name: "elasticbeanstalk-us-east-2-096046092320"
  # the bucket path is the app name : it's the folder that will hold our sources inside the bucket
  bucket_path: "react-app-travis-aws"
  # ant time we push code to the master that's the time to deploy
  on:
    branch: master
  # you have to create a new user from amazon iam to let travis deploy your app.
  # after generating the user id and the secret, you have to store them on travis as environment variables
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key:
    secure: "$AWS_SECRET_KEY"
